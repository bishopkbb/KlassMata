# docker-compose.yml

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: klassmata-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=mongodb://admin:password123@mongodb-local:27017/klassmata?authSource=admin
      - FLUTTERWAVE_PUBLIC_KEY=${FLUTTERWAVE_PUBLIC_KEY}
      - FLUTTERWAVE_SECRET_KEY=${FLUTTERWAVE_SECRET_KEY}
      - PAGA_PUBLIC_KEY=${PAGA_PUBLIC_KEY}
      - PAGA_SECRET_KEY=${PAGA_SECRET_KEY}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - klassmata-network
    restart: unless-stopped
    depends_on:
      - mongodb-local
    command: npm run dev

  mongodb-local:
    image: mongo:7.0
    container_name: klassmata-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=klassmata
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - klassmata-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: klassmata-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - klassmata-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  klassmata-network:
    driver: bridge